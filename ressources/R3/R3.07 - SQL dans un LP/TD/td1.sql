-------------------------------
-- QUESTION 1
-------------------------------

-- SANS EXCEPTION

DECLARE
    MOY_BD NOTATION.MOY_TEST%TYPE;    
BEGIN
    SELECT AVG(MOY_TEST) INTO MOY_BD
    FROM NOTATION WHERE CODE='BD';
    DBMS_OUTPUT.PUT_LINE('MOYENNE DE BD : ' || MOY_BD);
END;

-- AVEC EXCEPTION

DECLARE
    MOY_BD NOTATION.MOY_TEST%TYPE;
    ERROR_NOTE EXCEPTION;
    
BEGIN
    SELECT AVG(MOY_TEST) INTO MOY_BD
    FROM NOTATION WHERE CODE='BD';
    IF MOY_BD IS NULL THEN RAISE ERROR_NOTE;
    END IF;
    DBMS_OUTPUT.PUT_LINE('MOYENNE DE BD : ' || MOY_BD);
    EXCEPTION
    WHEN ERROR_NOTE
    THEN DBMS_OUTPUT.PUT_LINE('ERREUR - PAS DE NOTE');
END;


------------------------------
-- QUESTION 2
------------------------------

-- AUTOMATIQUE

DECLARE
    TROUVER BOOLEAN := FALSE;
    PAS_NOTE EXCEPTION;

    CURSOR MOY_ET IS
        SELECT ET.NUM_ET, ET.NOM_ET, TRUNC(AVG(N.MOY_TEST),2) MOY
        FROM ETUDIANT ET
        JOIN NOTATION N ON ET.NUM_ET = N.NUM_ET
        GROUP BY ET.NUM_ET, ET.NOM_ET;

BEGIN
    FOR UNE_LIGNE IN MOY_ET
    LOOP
        DBMS_OUTPUT.PUT_LINE(UNE_LIGNE.NUM_ET || ' ' || UNE_LIGNE.NOM_ET || ' ' || UNE_LIGNE.MOY);
    END LOOP;
    
    IF NOT TROUVER THEN RAISE PAS_NOTE; END IF;
    EXCEPTION
    WHEN PAS_NOTE THEN DBMS_OUTPUT.PUT_LINE('AUCUNE NOTE');
END;

--MANUELLE

DECLARE
    TROUVER BOOLEAN := FALSE;
    PAS_NOTE EXCEPTION;

    CURSOR MOY_ET IS
        SELECT ET.NUM_ET, ET.NOM_ET, TRUNC(AVG(N.MOY_TEST),2) MOY
        FROM ETUDIANT ET
        JOIN NOTATION N ON ET.NUM_ET = N.NUM_ET
        GROUP BY ET.NUM_ET, ET.NOM_ET;
        
    UNE_LIGNE MOY_ET%ROWTYPE;
BEGIN
    OPEN MOY_ET;
    FETCH MOY_ET INTO UNE_LIGNE;
    WHILE MOY_ET%FOUND
    LOOP
        DBMS_OUTPUT.PUT_LINE(UNE_LIGNE.NUM_ET || ' ' || UNE_LIGNE.NOM_ET || ' ' || UNE_LIGNE.MOY);
        FETCH MOY_ET INTO UNE_LIGNE;
    END LOOP;
    CLOSE MOY_ET;
    
    IF NOT TROUVER THEN RAISE PAS_NOTE; END IF;
    EXCEPTION
    WHEN PAS_NOTE THEN DBMS_OUTPUT.PUT_LINE('AUCUNE NOTE');
END;

---------------------------
-- QUESTION 3
---------------------------

ACCEPT SEARCHED_CODE PROMPT 'QUELLE MATIERE'
DECLARE
    CHAINE VARCHAR2(200);
    CURSOR MATPATH IS
        SELECT CODE FROM MODULE WHERE CODE IS NOT NULL AND CODE <> '&SEARCHED_CODE'
        CONNECT BY CODE = PRIOR CODEPERE
        START WITH CODE = '&SEARCHED_CODE'
        ORDER BY LEVEL DESC;
BEGIN
    FOR CMAT IN MATPATH
    LOOP
        CHAINE := CHAINE || '/' || CMAT.CODE;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(CHAINE);
END;

----------------------------
-- QUESTION 4
----------------------------

ACCEPT SEARCHED_TABLE PROMPT 'QUELLE TABLE'
DECLARE 
    CHAINE VARCHAR(200);
    CURSOR SELECTED_TABLE IS
        SELECT TABLE_NAME, COLUMN_NAME FROM USER_TAB_COLUMNS
        WHERE TABLE_NAME IS NOT NULL AND TABLE_NAME = '&SEARCHED_TABLE';
BEGIN
    CHAINE := '&SEARCHED_TABLE' || '(';
    FOR ATT IN SELECTED_TABLE
    LOOP
        CHAINE := CHAINE || ATT.COLUMN_NAME || ',';
    END LOOP;
    CHAINE := SUBSTR(CHAINE, 1, LENGTH(CHAINE)-2);
    CHAINE := CHAINE || ')';
    DBMS_OUTPUT.PUT_LINE(CHAINE);
END;

---------------------------
-- QUESTION 5
---------------------------

DECLARE
    PASMODULE EXCEPTION;
    
    NB NUMBER(4);
    CURSOR MAT IS
        SELECT CODE, LIBELLE
        FROM MODULE
        WHERE CODE NOT IN (SELECT CODEPERE
                            FROM MODULE
                            WHERE CODEPERE IS NOT NULL);

BEGIN
    SELECT COUNT(*) INTO NB
    FROM MODULE;
    IF NB = 0 THEN RAISE PASMODULE; END IF;
    FOR ADDMAT IN MAT
    LOOP
        INSERT INTO MATIERE
        VALUES (ADDMAT.CODE, ADDMAT.LIBELLE);
    END LOOP;
EXCEPTION
    WHEN PASMODULE THEN DBMS_OUTPUT.PUT_LINE('TABLE MODULE VIDE');
END;